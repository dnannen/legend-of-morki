Index: legende-von-morki/src/main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/legende-von-morki/src/main.java b/legende-von-morki/src/main.java
new file mode 100644
--- /dev/null	(date 1628608955957)
+++ b/legende-von-morki/src/main.java	(date 1628608955957)
@@ -0,0 +1,9 @@
+import model.allies.soldiers.Archer;
+
+public class main {
+
+    public static void main(String[] args) {
+        Archer archer = new Archer(30, 14, 0, 0.5, 2, 0, false);
+        System.out.println(archer.getHp());
+    }
+}
Index: legende-von-morki/src/model/allies/heroes/Hero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/legende-von-morki/src/model/allies/heroes/Hero.java b/legende-von-morki/src/model/allies/heroes/Hero.java
new file mode 100644
--- /dev/null	(date 1628604657066)
+++ b/legende-von-morki/src/model/allies/heroes/Hero.java	(date 1628604657066)
@@ -0,0 +1,97 @@
+package model.allies.heroes;
+
+import model.IActiveGameEntityAbilities;
+import model.IGameEntityAttributes;
+
+public class Hero implements IGameEntityAttributes, IActiveGameEntityAbilities {
+
+    //TODO early stage, some functionality still missing
+
+    public Hero(int hp, int dmg, float speed, double attackspeed, int armour, int ap, boolean aoe) {
+        this.setHp(hp);
+        this.setDmg(dmg);
+        this.setSpeed(speed);
+        this.setAttackspeed(attackspeed);
+        this.setArmour(armour);
+        this.setAP(ap);
+        this.setAoe(aoe);
+    }
+
+    //TODO implementation of skills missing
+
+
+    @Override
+    public void die() {
+
+    }
+
+    @Override
+    public int getHp() {
+        return 0;
+    }
+
+    @Override
+    public void setHp(int hp) {
+
+    }
+
+    @Override
+    public int getDmg() {
+        return 0;
+    }
+
+    @Override
+    public void setDmg(int dmg) {
+
+    }
+
+    @Override
+    public float getSpeed() {
+        return 0;
+    }
+
+    @Override
+    public void setSpeed(float speed) {
+
+    }
+
+    @Override
+    public double getAttackspeed() {
+        return 0;
+    }
+
+    @Override
+    public void setAttackspeed(double attackspeed) {
+
+    }
+
+    @Override
+    public int getArmour() {
+        return 0;
+    }
+
+    @Override
+    public void setArmour(int armor) {
+
+    }
+
+    @Override
+    public int getAP() {
+        return 0;
+    }
+
+    @Override
+    public void setAP(int AP) {
+
+    }
+
+    @Override
+    public boolean isAoe() {
+        return false;
+    }
+
+    @Override
+    public void setAoe(boolean aoe) {
+
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_15\" default=\"true\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 20acc950711f3251213f80ff806d3be22ab374e9)
+++ b/.idea/misc.xml	(date 1628606599218)
@@ -3,5 +3,7 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_15" default="true" project-jdk-name="15" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_15" default="true" project-jdk-name="15" project-jdk-type="JavaSDK">
+    <output url="file://$USER_HOME$/Documents/Output" />
+  </component>
 </project>
\ No newline at end of file
